将变化的quack、fly等等需求抽象出来，封装在类中

不将quack和fly方法写死在Duck中。将quack和fly抽离出来，可以

实现代码重用的同时提高灵活性。

这样一来我们可以将不同的接口在不同的行为类里面进行组合，产生各种各样的行为或者定制！
例如FlyNoWay或者FlyWithWings，以及并且行为只需要实现一次。
需要修改飞行行为的时候到对应的行为类去修改就行了不需要修改各种各样的Duck类。我们默认Duck是比行为多的。
定制完各种各样的行为之后，通过组合的方式放到一个对象上，很大程度解耦了！